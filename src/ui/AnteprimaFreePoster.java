package ui;


import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Polygon;
import java.awt.Toolkit;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.geom.Point2D;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.net.SocketAddress;
import java.net.UnknownHostException;
import java.util.ArrayList;

import javax.swing.JOptionPane;
import javax.swing.JPanel;

import manager.ElementTypeEX;
import manager.IManager;
import manager.PositionEX;
import manager.PosterTypeEx;
import dataModel.Control;
import dataModel.Element;
import dataModel.FreePoster;
import dataModel.IPoster;
import dataModel.Paper;

/**
 *
 * @author Matteo
 */
public class AnteprimaFreePoster extends javax.swing.JFrame {
	private IManager manager;
	private IPoster poster;
	private boolean anteprima=false;
	/** Creates new form Modifica */

	public AnteprimaFreePoster(IManager manager) {
		this.manager = manager;
		poster=manager.getIPoster();
		initComponents();

	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {
		java.awt.GridBagConstraints gridBagConstraints;
		this.setTitle("Modifica Cartellone");
		cartellonePanel = new AnteprimaPannelloClass(manager,this);
		descrizionePanel = new javax.swing.JPanel();
		operazioniPanel = new JPanel();
		jScrollPane1 = new javax.swing.JScrollPane();
		descrizioneTextArea = new javax.swing.JTextArea();
		nomeTextField = new javax.swing.JTextField();
		classeTextField = new javax.swing.JTextField();
		jLabel1 = new javax.swing.JLabel();
		jLabel2 = new javax.swing.JLabel();
		jLabel3 = new javax.swing.JLabel();

		anteprimaButton = new javax.swing.JButton();
		salvaButton = new javax.swing.JButton();

		setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
		getContentPane().setLayout(new java.awt.GridBagLayout());
		setAlwaysOnTop(true);

		cartellonePanel.setBackground(new java.awt.Color(255, 255, 255));
		//cartellonePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Cartellone", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Cambria", 1, 14))); // NOI18N
		cartellonePanel.setMinimumSize(new java.awt.Dimension(450, 450));
		cartellonePanel.setPreferredSize(new java.awt.Dimension(450, 450));
		cartellonePanel.setLayout(new java.awt.GridBagLayout());
		cartellonePanel.addMouseListener(cartellonePanel);
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		getContentPane().add(cartellonePanel, gridBagConstraints);

		descrizionePanel.setBackground(new java.awt.Color(181, 208, 249));
		descrizionePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Descrizione\n", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Cambria", 1, 14))); // NOI18N
		descrizionePanel.setLayout(new java.awt.GridBagLayout());

		jScrollPane1.setHorizontalScrollBar(null);

		descrizioneTextArea.setColumns(20);
		descrizioneTextArea.setLineWrap(true);
		descrizioneTextArea.setRows(5);
		descrizioneTextArea.setEditable(false);
		descrizioneTextArea.setText(manager.getIPoster().getDescription());
		jScrollPane1.setViewportView(descrizioneTextArea);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 5;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.insets = new java.awt.Insets(0, 0, 12, 0);
		descrizionePanel.add(jScrollPane1, gridBagConstraints);

		nomeTextField.setText(manager.getIPoster().getName());
		nomeTextField.setPreferredSize(new java.awt.Dimension(20, 20));
		nomeTextField.setEditable(false);
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.insets = new java.awt.Insets(0, 0, 12, 0);
		descrizionePanel.add(nomeTextField, gridBagConstraints);

		classeTextField.setText(manager.getIPoster().getClassroom());
		classeTextField.setEditable(false);
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 3;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.ipadx = 2;
		gridBagConstraints.insets = new java.awt.Insets(0, 0, 12, 0);
		descrizionePanel.add(classeTextField, gridBagConstraints);

		jLabel1.setText("Nome:");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		descrizionePanel.add(jLabel1, gridBagConstraints);

		jLabel2.setText("Classe:");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 2;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.insets = new java.awt.Insets(17, 0, 0, 0);
		descrizionePanel.add(jLabel2, gridBagConstraints);

		jLabel3.setText("Commento:");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 4;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.insets = new java.awt.Insets(17, 0, 0, 0);
		descrizionePanel.add(jLabel3, gridBagConstraints);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		getContentPane().add(descrizionePanel, gridBagConstraints);

		operazioniPanel.setBackground(new java.awt.Color(181, 208, 249));
		operazioniPanel.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEtchedBorder(),
				javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Cambria", 1, 14)))); // NOI18N
		operazioniPanel.setMinimumSize(new java.awt.Dimension(650, 55));
		operazioniPanel.setPreferredSize(new java.awt.Dimension(600, 80));
		operazioniPanel.setLayout(new java.awt.GridLayout(1, 0));


		anteprimaButton.setText("Anteprima");
		anteprimaButton.setToolTipText("Simula l'utilizzo del tabellone");
		anteprimaButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				anteprimaButtonActionPerformed(evt);
			}
		});
		operazioniPanel.add(anteprimaButton);
		anteprimaButton.setEnabled(false);

		salvaButton.setText("Chiudi");
		salvaButton.setToolTipText("Salva le modifiche e chiudi");
		salvaButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				salvaButtonActionPerformed(evt);
			}
		});
		operazioniPanel.add(salvaButton);
		salvaButton.setEnabled(true);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.gridwidth = 2;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.ipadx = 7;
		gridBagConstraints.ipady = 2;
		getContentPane().add(operazioniPanel, gridBagConstraints);


		setResizable(false);

		pack();

		Toolkit tk = Toolkit.getDefaultToolkit();
		Dimension screenSize = tk.getScreenSize();
		int screenHeight = screenSize.height;
		int screenWidth = screenSize.width;

		setLocation((screenWidth-this.getSize().width) / 2, (screenHeight-this.getSize().height) / 2);
		this.setVisible(true);

	}// </editor-fold>//GEN-END:initComponents

    private void stopAnteprima(){
       	InetAddress addr = null;
      	try {
      		addr = InetAddress.getByName("127.0.0.1");
      	} catch (UnknownHostException e1) {
      		e1.printStackTrace();
      	}
      	int port = 4212;
      	SocketAddress sockaddr = new InetSocketAddress(addr, port);

      	// Create an unbound socket
      	Socket sock = new Socket();

      	// This method will block no more than timeoutMs.
      	// If the timeout occurs, SocketTimeoutException is thrown.
      	// int timeoutMs = 2000; Ê // 2 seconds
      	try {
      		sock.connect(sockaddr);
      	} catch (IOException e1) {
      		System.err.println("Socket problem.");
      		return;
      	}

      	PrintWriter out = null;
      	BufferedReader in = null;

      	try {
      		out = new PrintWriter(sock.getOutputStream(), true);
      		in = new BufferedReader(new InputStreamReader(sock.getInputStream()));
      	} catch (UnknownHostException e1) {
      		System.err.println("Don't know about host: taranis.");
      	} catch (IOException e1) {
      		System.err.println("Couldn't get I/O for "
      				+ "the connection to: taranis.");
      	}

      	BufferedReader stdIn = new BufferedReader(new InputStreamReader(System.in));
      	String userInput;

		out.println("admin");
		out.flush();
		out.println("control myMedia stop");
		out.flush();
      }

	private void salvaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salvaButtonActionPerformed
		if(anteprima)
			stopAnteprima();
		this.dispose();
	}

	private void anteprimaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_anteprimaButtonActionPerformed
		try {
			((FreePoster)manager.getIPoster()).getElement(cartellonePanel.getSelectedElement()).exec();
			anteprima=true;
		} catch (PositionEX e) {
			e.printStackTrace();
		}
	}



	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton aggiungiAreaButton;
	private javax.swing.JButton aggiungiButton;
	private javax.swing.JButton anteprimaButton;
	private AnteprimaPannelloClass cartellonePanel;
	private javax.swing.JTextField classeTextField;
	private javax.swing.JPanel descrizionePanel;
	private javax.swing.JTextArea descrizioneTextArea;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JLabel jLabel3;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JButton modificaButton;
	private javax.swing.JTextField nomeTextField;
	private javax.swing.JPanel operazioniPanel;
	private javax.swing.JButton rimuoviButton;
	private javax.swing.JButton salvaButton;
	// End of variables declaration//GEN-END:variables
	
	public void enableAnteprima(boolean e) {
		anteprimaButton.setEnabled(e);
		if(e){
		try {
			cartellonePanel.setToolTipText(((FreePoster)poster).getElement(cartellonePanel.getSelectedElement()).toString());
		} catch (PositionEX e1) {
			e1.printStackTrace();
		}
		}
	}

}

class AnteprimaPannelloClass extends JPanel implements MouseListener {

	private int mouseX=0;
	private int mouseY=0;
	private IManager manager;
	private double scaleX;
	private double scaleY;
	private int screenHeight = 0;
	private int screenWidth = 0;
	private AnteprimaFreePoster posterMod;

	public AnteprimaPannelloClass(IManager manager,AnteprimaFreePoster poster)
	{
		this.manager=manager;	
		this.posterMod=poster;
		Toolkit tk = Toolkit.getDefaultToolkit();
		Dimension screenSize = tk.getScreenSize();
		screenHeight = screenSize.height;
		screenWidth = screenSize.width;

		scaleX=((double)this.getSize().getWidth())/((double)screenWidth);

		scaleY=((double)this.getSize().getHeight())/((double)screenHeight);
		System.out.println("larg:"+ this.getSize().width+ "  larg2 : "+this.getWidth()+ "larg 3 :"+ this.getSize().getWidth());
	}

	public void paint(Graphics g) {
		super.paint(g);

		if(scaleX!=((double)this.getSize().getWidth())/((double)screenWidth))
		{

			scaleX=((double)this.getSize().getWidth())/((double)screenWidth);
			scaleY=((double)this.getSize().getHeight())/((double)screenHeight);
		}

		FreePoster poster=((FreePoster)manager.getIPoster());

		for(Integer id:poster.getIdList())
		{
			Polygon newArea=new Polygon();
			try {
				Polygon area=poster.getElement(id).getArea();
				Element e=poster.getElement(id);

				for(int x=0; x< area.xpoints.length;x++)
				{
					double px=area.xpoints[x]*scaleX;
					double py=area.ypoints[x]*scaleY;

					newArea.addPoint((int)px, (int)py);

				}
				if(newArea.contains(new Point(mouseX,mouseY)))
				{
					g.setColor(new Color(255,0,0));
					((Graphics2D)g).fillPolygon(newArea);
				}else{
					g.setColor(new Color(0,0,0));

					if(poster.getElement(id) instanceof Control)
					{
						g.setColor(new Color(0,0,255));

					}
					else if(poster.getElement(id) instanceof Paper)
					{
						g.setColor(new Color(0,255,0));

					}
					else if(poster.getElement(id) instanceof Element)
					{
						g.setColor(new Color(255,255,255));

					}
					((Graphics2D)g).fillPolygon(newArea);
					g.setColor(new Color(0,0,0));
					g.drawPolygon(newArea.xpoints, newArea.ypoints, newArea.npoints);
				}

			} catch (PositionEX e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}


		}


	}

	private Point getRealPoint()
	{

		return new Point((int)(mouseX/scaleX),(int)(mouseY/scaleY));
	}

	public boolean isElementSelected()
	{
		try {
			((FreePoster)(manager.getIPoster())).getElement(getRealPoint());
			return true;
		} catch (PositionEX e) {
			return false;
		}

	}

	public Integer getSelectedElement() throws PositionEX
	{
		if(isElementSelected()){
			return ((FreePoster)(manager.getIPoster())).getElement(getRealPoint()).getId();

		}else
			throw new PositionEX("Not selected Element");
	}

	public void mouseClicked(MouseEvent e) {
		mouseX=e.getX();
		mouseY=e.getY();
		if(isElementSelected())
			posterMod.enableAnteprima(true);
		else
			posterMod.enableAnteprima(false);
		repaint();
	}
	public void mouseEntered(MouseEvent e) {
		// TODO Auto-generated method stub

	}
	public void mouseExited(MouseEvent e) {
		// TODO Auto-generated method stub

	}
	public void mousePressed(MouseEvent e) {
		// TODO Auto-generated method stub

	}
	public void mouseReleased(MouseEvent e) {
		// TODO Auto-generated method stub

	}
}